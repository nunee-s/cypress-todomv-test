"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sh = exports.executeProcess = exports.executeAndControlProcess = void 0;
const child_process_1 = require("child_process");
function makeError(error, properties) {
    if (typeof error === 'string') {
        error = new Error(error);
    }
    if (!properties)
        return error;
    return Object.assign(error, properties);
}
function executeAndControlProcess(command, args = [], options) {
    const subProcess = child_process_1.spawn(command, args, Object.assign({ stdio: 'pipe' }, options === null || options === void 0 ? void 0 : options.spawnOptions));
    const exitPromise = new Promise((resolve, reject) => {
        subProcess.on('error', reject).on('close', (exitCode, signal) => exitCode === 0
            ? resolve({ exitCode, stdout, stderr })
            : signal
                ? reject(makeError(new Error(`process exited due to signal ${signal} executing process ${command} with args ${JSON.stringify(args)}`), {
                    signal,
                    stdout,
                    stderr,
                }))
                : reject(makeError(new Error(`non-zero exit code (${exitCode}) executing process ${command} with args ${JSON.stringify(args)}`), {
                    exitCode,
                    stdout,
                    stderr,
                })));
        let stdout = subProcess.stdout ? '' : undefined;
        let stderr = subProcess.stderr ? '' : undefined;
        subProcess.stdout && subProcess.stdout.on('data', data => (stdout += data.toString()));
        subProcess.stderr && subProcess.stderr.on('data', data => (stderr += data.toString()));
        if (options === null || options === void 0 ? void 0 : options.timeout) {
            setTimeout(() => subProcess.kill(), options.timeout);
        }
        return { stdout, stderr };
    });
    return { subProcess, exitPromise };
}
exports.executeAndControlProcess = executeAndControlProcess;
function executeProcess(command, args = [], options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield executeAndControlProcess(command, args, options).exitPromise;
    });
}
exports.executeProcess = executeProcess;
function sh(command, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield executeProcess('/bin/bash', ['-c', command], Object.assign(Object.assign({}, options), { spawnOptions: Object.assign({ stdio: 'inherit' }, options === null || options === void 0 ? void 0 : options.spawnOptions) }));
    });
}
exports.sh = sh;
//# sourceMappingURL=process.js.map